import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:mob3_jamil_002_uts_xt/component/custom_text.dart';
import 'package:mob3_jamil_002_uts_xt/component/gradient_button.dart';

class EditPage extends StatefulWidget {
  final String docId; // Email sebagai parameter untuk mengambil data spesifik pengguna

  const EditPage({Key? key, required this.docId}) : super(key: key);

  @override
  _EditPageState createState() => _EditPageState();
}

class _EditPageState extends State<EditPage> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final _formKey = GlobalKey<FormState>();

  late TextEditingController _nimController;
  late TextEditingController _namaController;
  late TextEditingController _emailController;
  late TextEditingController _passwordController;
  bool _isLoading = false;
  bool isPassword = true;

  @override
  void initState() {
    super.initState();
    _nimController = TextEditingController();
    _namaController = TextEditingController();
    _emailController = TextEditingController();
    _passwordController = TextEditingController();
    _loadUserData();
  }

  // Fungsi untuk mengambil data pengguna dari Firestore
  Future<void> _loadUserData() async {
     
    try {
      DocumentSnapshot userDoc = await _firestore.collection('users').doc(widget.docId).get();
      print(userDoc.data()); 
      if (userDoc.exists) {
        var userData = userDoc.data() as Map<String, dynamic>;
        _nimController.text = userData['nim'] ?? '';
        _namaController.text = userData['nama'] ?? '';
        _emailController.text = userData['email'] ?? '';
        _passwordController.text = '';
      
      }
    } catch (e) {
      print("Error loading user data: $e");
    }
  }

  // Fungsi untuk menyimpan perubahan data pengguna ke Firestore
  Future<void> _updateUser() async {
    
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isLoading = true;
      });
      try {
        await _firestore.collection('users').doc(widget.docId).update({
          'nim': _nimController.text,
          'nama': _namaController.text,
          'email': _emailController.text,
          'password': _passwordController.text,
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("User information updated successfully")),
        );
        Navigator.of(context).pop(); // Kembali ke halaman sebelumnya
      } catch (e) {
        print("Error saving changes: $e");
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Failed to update user information")),
        );
      } finally {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  void dispose() {
    _nimController.dispose();
    _namaController.dispose();
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("EDIT USER",style: TextStyle(fontWeight: FontWeight.bold),),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              Icon(
                Icons.account_circle_outlined,
                size: 100,
                color: Colors.blue,
              ),
              SizedBox(height: 30),
              CustomTextInput(labelText: 'NIM', hintText: 'Nim User', icon: Icons.numbers, controller: _nimController),
              SizedBox(height: 30),
              CustomTextInput(labelText: 'Nama', hintText: 'Nama User', icon: Icons.person, controller: _namaController),
              SizedBox(height: 30),
              CustomTextInput(labelText: 'Email', hintText: 'Email User', icon: Icons.mail, controller: _emailController),
              
              SizedBox(height: 30),
              CustomTextInput(labelText: 'Password', hintText: 'Masukan Password', icon: Icons.lock,
              isObscure: isPassword, 
              controller: _passwordController, showPassword: () {
                setState(() {
                  isPassword = !isPassword;
                });
              },),
          
              SizedBox(height: 40),
              _isLoading ? Center(child: CircularProgressIndicator())
                : GradientButton(
                  onPressed: _updateUser,
                  text: "Update Data",
                  colorStart: Colors.purple,
                  colorEnd: Colors.indigo,
                ),
            ],
          ),
        ),
      ),
    );
  }
}